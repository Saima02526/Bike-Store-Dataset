CREATE DATABASE IF NOT EXISTS BIKESTORE;
USE BIKESTORE;

CREATE TABLE IF NOT EXISTS BIKE_STORE_DATA
( ORDER_ID INT,
CUSTOMERS VARCHAR(300),
CITY VARCHAR(100),
STATE VARCHAR(50),
ORDER_DATE date,
TOTAL_UNITS INT,
REVENUE DECIMAL(50,2),
PRODUCT_NAME VARCHAR(500),
CATEGORY_NAME VARCHAR(200),
BRAND_NAME VARCHAR(30),
STORE_NAME VARCHAR(40),
SALES_REP VARCHAR(70));
 DROP TABLE BIKE_STORE_DATA;
LOAD DATA INFILE
'D:/BIKESTORE.csv'
INTO TABLE BIKE_STORE_DATA
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;


/*Q-1 Find total revenue earned by each customer grouped by brand and store name and order them from largest to smallest?*/

SELECT BRAND_NAME,STORE_NAME, SUM(REVENUE) AS TOTAL_REVENUE FROM BIKE_STORE_DATA GROUP BY BRAND_NAME,STORE_NAME
ORDER BY TOTAL_REVENUE DESC;

/*Q-2 Find maximum revenue for unique Customers where state is Califonia (CA) with respect to order date?*/
SELECT DISTINCT CUSTOMERS ,ORDER_DATE,MAX(REVENUE) FROM BIKE_STORE_DATA WHERE STATE = 'CA' 
GROUP BY CUSTOMERS,ORDER_DATE ORDER BY MAX(REVENUE);

/*Q-3 Find unique customers whose revenue falls between 1000 to 8000 with respect to category and Sales representative?*/

SELECT DISTINCT CUSTOMERS,CATEGORY_NAME,SALES_REP,REVENUE FROM BIKE_STORE_DATA
WHERE REVENUE BETWEEN 1000 AND 8000 
GROUP BY CATEGORY_NAME,SALES_REP,CUSTOMERS,REVENUE;

/*Q-4 Find records where city is utica, duarte and Houston?*/

SELECT * FROM BIKE_STORE_DATA WHERE CITY IN('utica','duarte','Houston');

/*Q-5 Which is the most common product name based on maximum revenue?*/

SELECT PRODUCT_NAME,REVENUE,CITY FROM BIKE_STORE_DATA
WHERE REVENUE = (SELECT MAX(REVENUE) FROM BIKE_STORE_DATA);

/*Q-6 Find Category where name starts with 'C' and ends with 'S' for all records?*/

SELECT * FROM BIKE_STORE_DATA WHERE CATEGORY_NAME LIKE 'C%S';

/*Q-7 Find revenue for customers where average revenue is greater than 1000 with respect to city, Brand Name and Order ID?*/

SELECT ORDER_ID,CITY,BRAND_NAME,CUSTOMERS,AVG(REVENUE) AS AVG_REVENUE FROM BIKE_STORE_DATA
GROUP BY ORDER_ID,CITY,BRAND_NAME,CUSTOMERS HAVING AVG_REVENUE > 1000;

/*Q-8 Find records where First name of Customer starts with 'j' and inbetween alphabet is 'h' and last alphabet is 'n'?*/
SELECT * FROM BIKE_STORES_DATA WHERE CUSTOMERs LIKE 'j%h%n';

/*Q-9 Find all records where brand name is not surly and trek.*/

SELECT * FROM BIKE_STORE_DATA WHERE BRAND_NAME NOT IN('surly','trek');

/*Q-10 Find records from BikeStores where revenue is equal to mimumum of revenue*/
SELECT * FROM BIKE_STORES_DATA WHERE REVENUE = (SELECT MIN(REVENUE) FROM BIKE_STORES_DATA);

/*Q-11 Which particular day has the customer earned the minimum revenue?*/

ALTER TABLE BIKE_STORE_DATA
ADD COLUMN `DAY` INT NOT NULL AFTER ORDER_DATE;
UPDATE BIKE_STORE_DATA SET `DAY` = DAY(ORDER_DATE);
SELECT `DAY`,CUSTOMERS,CITY,MIN(REVENUE) FROM BIKE_STORE_DATA GROUP BY CUSTOMERS,CITY,`DAY`
ORDER BY MIN(REVENUE) LIMIT 1;

/*Q-12 Find unique units when grouped by store name and sales representative for all customers.*/
SELECT DISTINCT TOTAL_UNITS, STORE_NAME,SALES_REP,COUNT(CUSTOMERS) FROM BIKE_STORES_DATA GROUP BY TOTAL_UNITS,STORE_NAME,SALES_REP
ORDER BY COUNT(CUSTOMERS);

/*Q-13 Which month has total revenue more than 2000 with respect to customer and order date?*/

SELECT MONTH(ORDER_DATE) , SUM(REVENUE),CUSTOMERS,ORDER_DATE FROM BIKE_STORES_DATA WHERE SUM(REVENUE) > 2000
GROUP BY CUSTOMERS,ORDER_DATE ;

